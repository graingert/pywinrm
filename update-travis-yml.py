#!/usr/bin/env python3
import yaml
import pyaml

import argparse
import json
import sys
import itertools
import abc
import re
import shlex
import pkg_resources


class OS(metaclass=abc.ABCMeta):
    def __init__(self, extra: str) -> None:
        self.extra = extra

    @property
    @abc.abstractmethod
    def name(self) -> str: ...

    @property
    @abc.abstractmethod
    def extra_key(self) -> str: ...


class Linux(OS):
    name = 'linux'
    extra_key = 'dist'


class MacOS(OS):
    name = 'osx'
    extra_key = 'osx_image'


languages = ['generic']
dists = [
    *[Linux(d) for d in ['xenial', 'trusty']],
    *[MacOS(i) for i in ['xcode10.1', 'xcode9.4']],
]
pythons = [
    '2.7.15',
    '3.4.9',
    '3.5.6',
    '3.6.8',
    '3.7.2',
    'pypy2.7-6.0.0',
    'pypy3.5-6.0.0',
]


V3_7_0 = pkg_resources.parse_version('3.7.0')


def process(language: str, os: OS, python: str):
    is_linux = isinstance(os, Linux)
    linux_ssl_too_old = (
        is_linux and
        os.extra == 'trusty' and
        pkg_resources.parse_version(python) >= V3_7_0
    )
    env = {
        'PYENV_VERSION': python,
        'INSTALL_OPENSSL': (
            (isinstance(os, MacOS) and python.startswith('pypy')) or
            linux_ssl_too_old
        ),
        'INSTALL_LINUXBREW': linux_ssl_too_old,
    }
    env_str = ' '.join([
        f'{k}={shlex.quote(str(v))}' for k, v in env.items()
        if v and re.match('[a-zA-Z_][a-zA-Z0-9_]*', k)
    ])

    return {
        'language': language,
        'os': os.name,
        os.extra_key: os.extra,
        'env': env_str,
        **({'sudo': False} if is_linux else {}),
    }


matrix_include = [
    process(l, os, p)
    for l, os, p in itertools.product(languages, dists, pythons)
]


def main(args):
    prog, ns = args
    comment = f'# automatically generated by {prog}'
    with open(ns.file, 'r+') as f:
        data = yaml.safe_load(f)
        f.seek(0)

        travis = {
            **data,
            'matrix': {'include': matrix_include},
        }
        expected = f'{comment}\n{pyaml.dump(travis, sort_dicts=False)}'

        if ns.check:
            if f.read() != expected:
                raise Exception(f'{ns.file} is outdated!')
            return

        f.write(expected)
        f.truncate()


parser = argparse.ArgumentParser(description='Generate .travis.yml')
parser.add_argument('-f', '--file', default='.travis.yml', type=str)
parser.add_argument(
    '-c', '--check',
    action='store_true',
    help='Just check the output file is up to date',
)


def parse_args(argv):
    prog, *args = argv
    return prog, parser.parse_args(args)


if __name__ == '__main__':
    main(parse_args(sys.argv))
